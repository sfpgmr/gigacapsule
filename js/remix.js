'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _jsSliderJs = require('../js/slider.js');

var _jsSliderJs2 = _interopRequireDefault(_jsSliderJs);

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _remote = require('remote');

var _remote2 = _interopRequireDefault(_remote);

var _jsDenodeifyJs = require('../js/denodeify.js');

var _jsDenodeifyJs2 = _interopRequireDefault(_jsDenodeifyJs);

var fs = require('fs');

var readFile = (0, _jsDenodeifyJs2['default'])(fs.readFile);
var audioCtx = new AudioContext();
var resources = [];

function toArrayBuffer(buffer) {
	var ab = new ArrayBuffer(buffer.length);
	var view = new Uint8Array(ab);
	var len = buffer.length;
	for (var i = 0; i < len; ++i) {
		view[i] = buffer[i];
	}
	return ab;
}

window.onload = function () {
	var mes = d3.select('body').append('h1').classed('mes', true).text('準備中です。少々お待ちください。。');

	var id = setInterval((function () {
		var i = 0;
		return function () {
			mes.style('opacity', i);
			i = ++i & 0x1;
		};
	})(), 500);

	_ipc2['default'].on('resources', function (r) {
		clearInterval(id);
		mes.remove();
		resources = r;

		var svg = d3.select('body').append('svg').attr({ width: 1024, height: 768 });

		var promise = Promise.resolve();
		var sources = [];

		for (var i = 0; i < 7; ++i) {
			promise = promise.then(readFile.bind(null, resources[i + 28].path)).then(function (data) {
				return new Promise(function (resolve, reject) {
					var ab = toArrayBuffer(data);
					audioCtx.decodeAudioData(ab, function (buffer) {
						resolve(buffer);
					}, function (err) {
						reject(new Error('decodeAudioData():error:'));
					});
				});
			}).then((function (idx) {
				return function (buffer) {
					var source = audioCtx.createBufferSource();
					source.buffer = buffer;
					source.loop = false;
					sources.push(source);
					var gain = audioCtx.createGain();
					source.connect(gain);
					gain.connect(audioCtx.destination);
					var slider = new _jsSliderJs2['default'](svg, { x: 50 + idx * 70, y: 768 - 240, domain: [2.0, 0.0] });
					gain.gain.value = slider.value = 1.0;
					slider.on('change', function (v) {
						gain.gain.value = v;
					});
				};
			})(i))['catch'](function (e) {
				console.log(e);
			});
		}

		promise.then(function () {
			console.log('play');
			var current = audioCtx.currentTime + 0.01;
			sources.forEach(function (s) {
				s.start(current);
			});
		});
	});

	// var slider = new Slider(svg,{x:50,y:768 - 220});
	// var slider2 = new Slider(svg,{x:120,y:768 - 220});
	// slider.value = 0.5;
};
//# sourceMappingURL=data:application/json;base64,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QUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0dBQ0g7O0FBRUQsU0FBTyxDQUNOLElBQUksQ0FBQyxZQUFJO0FBQ1QsVUFBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwQixPQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUMxQyxVQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFHO0FBQ3BCLEtBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQyxDQUFDO0dBQ0gsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxDQUFDOzs7OztDQU1ILENBQUEiLCJmaWxlIjoicmVtaXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2xpZGVyIGZyb20gJy4uL2pzL3NsaWRlci5qcyc7XHJcbmltcG9ydCBpcGMgZnJvbSAnaXBjJztcclxuaW1wb3J0IHJlbW90ZSBmcm9tICdyZW1vdGUnO1xyXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5pbXBvcnQgZGVub2RlaWZ5IGZyb20gJy4uL2pzL2Rlbm9kZWlmeS5qcyc7XHJcblxyXG52YXIgcmVhZEZpbGUgPSBkZW5vZGVpZnkoZnMucmVhZEZpbGUpO1xyXG52YXIgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbnZhciByZXNvdXJjZXMgPSBbXTtcclxuXHJcbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmZmVyKSB7XHJcbiAgICB2YXIgYWIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyLmxlbmd0aCk7XHJcblx0dmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XHJcblx0dmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgdmlld1tpXSA9IGJ1ZmZlcltpXTtcclxuICAgIH1cclxuICAgcmV0dXJuIGFiO1xyXG59XHJcblxyXG53aW5kb3cub25sb2FkID0gKCk9PntcclxuXHR2YXIgbWVzID0gZDMuc2VsZWN0KCdib2R5JylcclxuXHQuYXBwZW5kKCdoMScpXHJcblx0LmNsYXNzZWQoJ21lcycsdHJ1ZSlcclxuXHQudGV4dCgn5rqW5YKZ5Lit44Gn44GZ44CC5bCR44CF44GK5b6F44Gh44GP44Gg44GV44GE44CC44CCJyk7XHJcblx0XHJcblx0dmFyIGlkID0gc2V0SW50ZXJ2YWwoKCgpPT57XHJcblx0XHR2YXIgaSA9IDA7XHJcblx0XHRyZXR1cm4gKCk9PntcclxuXHRcdFx0bWVzLnN0eWxlKCdvcGFjaXR5JyxpKTtcclxuXHRcdFx0aSA9ICsraSAmIDB4MTtcclxuXHRcdH1cclxuXHR9KSgpLDUwMCk7XHJcblx0XHJcblx0aXBjLm9uKCdyZXNvdXJjZXMnLChyKT0+e1xyXG5cdFx0Y2xlYXJJbnRlcnZhbChpZCk7XHJcblx0XHRtZXMucmVtb3ZlKCk7XHJcblx0XHRyZXNvdXJjZXMgPSByO1xyXG5cclxuXHRcdHZhciBzdmcgPSBkMy5zZWxlY3QoJ2JvZHknKS5hcHBlbmQoJ3N2ZycpXHJcblx0XHQuYXR0cih7d2lkdGg6MTAyNCxoZWlnaHQ6NzY4fSk7XHJcblx0XHRcclxuXHRcdHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcblx0XHR2YXIgc291cmNlcyA9IFtdO1xyXG5cdFx0XHJcblx0XHRmb3IodmFyIGkgPSAwO2kgPCA3OysraSl7XHJcblx0XHRcdHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVhZEZpbGUuYmluZChudWxsLHJlc291cmNlc1tpICsgMjhdLnBhdGgpKVxyXG5cdFx0XHQudGhlbigoZGF0YSk9PntcclxuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xyXG5cdFx0XHRcdFx0dmFyIGFiID0gdG9BcnJheUJ1ZmZlcihkYXRhKTsgXHJcblx0XHRcdFx0XHRhdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoYWIsKGJ1ZmZlcik9PntcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZShidWZmZXIpO1xyXG5cdFx0XHRcdFx0fSwoZXJyKT0+e3JlamVjdChuZXcgRXJyb3IoJ2RlY29kZUF1ZGlvRGF0YSgpOmVycm9yOicpKTt9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnRoZW4oKChpZHgpPT4geyBcclxuXHRcdFx0XHRyZXR1cm4gKGJ1ZmZlcik9PntcclxuXHRcdFx0XHRcdHZhciBzb3VyY2UgPSBhdWRpb0N0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuXHRcdFx0XHRcdHNvdXJjZS5idWZmZXIgPSBidWZmZXI7XHJcblx0XHRcdFx0XHRzb3VyY2UubG9vcCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0c291cmNlcy5wdXNoKHNvdXJjZSk7XHJcblx0XHRcdFx0XHR2YXIgZ2FpbiA9IGF1ZGlvQ3R4LmNyZWF0ZUdhaW4oKTtcclxuXHRcdFx0XHRcdHNvdXJjZS5jb25uZWN0KGdhaW4pO1xyXG5cdFx0XHRcdFx0Z2Fpbi5jb25uZWN0KGF1ZGlvQ3R4LmRlc3RpbmF0aW9uKTtcclxuXHRcdFx0XHRcdHZhciBzbGlkZXIgPSBuZXcgU2xpZGVyKHN2Zyx7eDo1MCArIGlkeCAqIDcwLHk6NzY4IC0gMjQwLGRvbWFpbjpbMi4wLDAuMF19KTtcclxuXHRcdFx0XHRcdGdhaW4uZ2Fpbi52YWx1ZSA9IHNsaWRlci52YWx1ZSA9IDEuMDtcclxuXHRcdFx0XHRcdHNsaWRlci5vbignY2hhbmdlJywodik9PntcclxuXHRcdFx0XHRcdFx0Z2Fpbi5nYWluLnZhbHVlID0gdjtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0pKGkpKVxyXG5cdFx0XHQuY2F0Y2goKGUpPT57XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XHJcblx0XHRcdH0pO1x0XHRcdFx0XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHByb21pc2VcclxuXHRcdC50aGVuKCgpPT57XHJcblx0XHRcdGNvbnNvbGUubG9nKCdwbGF5Jyk7XHJcblx0XHRcdHZhciBjdXJyZW50ID0gYXVkaW9DdHguY3VycmVudFRpbWUgKyAwLjAxO1xyXG5cdFx0XHRzb3VyY2VzLmZvckVhY2goKHMpPT57XHJcblx0XHRcdFx0cy5zdGFydChjdXJyZW50KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHRcdFxyXG5cdFxyXG5cdC8vIHZhciBzbGlkZXIgPSBuZXcgU2xpZGVyKHN2Zyx7eDo1MCx5Ojc2OCAtIDIyMH0pO1xyXG5cdC8vIHZhciBzbGlkZXIyID0gbmV3IFNsaWRlcihzdmcse3g6MTIwLHk6NzY4IC0gMjIwfSk7XHJcblx0Ly8gc2xpZGVyLnZhbHVlID0gMC41O1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
