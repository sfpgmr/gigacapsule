'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _jsSliderJs = require('../js/slider.js');

var _jsSliderJs2 = _interopRequireDefault(_jsSliderJs);

var _ipc = require('ipc');

var _ipc2 = _interopRequireDefault(_ipc);

var _remote = require('remote');

var _remote2 = _interopRequireDefault(_remote);

var _jsDenodeifyJs = require('../js/denodeify.js');

var _jsDenodeifyJs2 = _interopRequireDefault(_jsDenodeifyJs);

var fs = _remote2['default'].require('fs');

var readFile = (0, _jsDenodeifyJs2['default'])(fs.readFile);
var audioCtx = new AudioContext();
var resources = [];

function toArrayBuffer(buffer) {
	var ab = new ArrayBuffer(buffer.length);
	var view = new Uint8Array(ab);
	for (var i = 0; i < buffer.length; ++i) {
		view[i] = buffer[i];
	}
	return ab;
}

window.onload = function () {
	var mes = d3.select('body').append('h1').classed('mes', true).text('準備中です。少々お待ちください。。');

	var id = setInterval((function () {
		var i = 0;
		return function () {
			mes.style('opacity', i);
			i = ++i & 0x1;
		};
	})(), 500);

	_ipc2['default'].on('resources', function (r) {
		clearInterval(id);
		mes.remove();
		resources = r;

		var svg = d3.select('body').append('svg').attr({ width: 1024, height: 768 });

		var promise = Promise.resolve();
		var sources = [];

		for (var i = 0; i < 7; ++i) {
			promise = promise.then(readFile.bind(null, resources[i].path)).then(function (data) {
				return new Promise(function (resolve, reject) {
					var ab = toArrayBuffer(data);
					audioCtx.decodeAudioData(ab, function (buffer) {
						resolve(buffer);
					}, function (err) {
						reject(new Error('decodeAudioData():error:'));
					});
				});
			}).then((function (idx) {
				return function (buffer) {
					var source = audioCtx.createBufferSource();
					source.buffer = buffer;
					source.loop = false;
					sources.push(source);
					var gain = audioCtx.createGain();
					source.connect(gain);
					gain.connect(audioCtx.destination);
					var slider = new _jsSliderJs2['default'](svg, { x: 50 + idx * 70, y: 768 - 240 });
					gain.gain.value = slider.value = 0.5;
					slider.on('change', function (v) {
						gain.gain.value = v;
					});
				};
			})(i))['catch'](function (e) {
				console.log(e);
			});
		}

		promise.then(function () {
			console.log('play');
			var current = audioCtx.currentTime + 0.01;
			sources.forEach(function (s) {
				s.start(current);
			});
		});
	});

	// var slider = new Slider(svg,{x:50,y:768 - 220});
	// var slider2 = new Slider(svg,{x:120,y:768 - 220});
	// slider.value = 0.5;
};
//# sourceMappingURL=data:application/json;base64,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VUFBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwQixPQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUMxQyxVQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFHO0FBQ3BCLEtBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQyxDQUFDO0dBQ0gsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxDQUFDOzs7OztDQU1ILENBQUEiLCJmaWxlIjoicmVtaXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2xpZGVyIGZyb20gJy4uL2pzL3NsaWRlci5qcyc7XHJcbmltcG9ydCBpcGMgZnJvbSAnaXBjJztcclxuaW1wb3J0IHJlbW90ZSBmcm9tICdyZW1vdGUnO1xyXG52YXIgZnMgPSByZW1vdGUucmVxdWlyZSgnZnMnKTtcclxuaW1wb3J0IGRlbm9kZWlmeSBmcm9tICcuLi9qcy9kZW5vZGVpZnkuanMnO1xyXG5cclxudmFyIHJlYWRGaWxlID0gZGVub2RlaWZ5KGZzLnJlYWRGaWxlKTtcclxudmFyIGF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG52YXIgcmVzb3VyY2VzID0gW107XHJcblxyXG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyKGJ1ZmZlcikge1xyXG4gICAgdmFyIGFiID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZpZXdbaV0gPSBidWZmZXJbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWI7XHJcbn1cclxuXHJcbndpbmRvdy5vbmxvYWQgPSAoKT0+e1xyXG5cdHZhciBtZXMgPSBkMy5zZWxlY3QoJ2JvZHknKVxyXG5cdC5hcHBlbmQoJ2gxJylcclxuXHQuY2xhc3NlZCgnbWVzJyx0cnVlKVxyXG5cdC50ZXh0KCfmupblgpnkuK3jgafjgZnjgILlsJHjgIXjgYrlvoXjgaHjgY/jgaDjgZXjgYTjgILjgIInKTtcclxuXHRcclxuXHR2YXIgaWQgPSBzZXRJbnRlcnZhbCgoKCk9PntcclxuXHRcdHZhciBpID0gMDtcclxuXHRcdHJldHVybiAoKT0+e1xyXG5cdFx0XHRtZXMuc3R5bGUoJ29wYWNpdHknLGkpO1xyXG5cdFx0XHRpID0gKytpICYgMHgxO1xyXG5cdFx0fVxyXG5cdH0pKCksNTAwKTtcclxuXHRcclxuXHRpcGMub24oJ3Jlc291cmNlcycsKHIpPT57XHJcblx0XHRjbGVhckludGVydmFsKGlkKTtcclxuXHRcdG1lcy5yZW1vdmUoKTtcclxuXHRcdHJlc291cmNlcyA9IHI7XHJcblxyXG5cdFx0dmFyIHN2ZyA9IGQzLnNlbGVjdCgnYm9keScpLmFwcGVuZCgnc3ZnJylcclxuXHRcdC5hdHRyKHt3aWR0aDoxMDI0LGhlaWdodDo3Njh9KTtcclxuXHRcdFxyXG5cdFx0dmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuXHRcdHZhciBzb3VyY2VzID0gW107XHJcblx0XHRcclxuXHRcdGZvcih2YXIgaSA9IDA7aSA8IDc7KytpKXtcclxuXHRcdFx0cHJvbWlzZSA9IHByb21pc2UudGhlbihyZWFkRmlsZS5iaW5kKG51bGwscmVzb3VyY2VzW2ldLnBhdGgpKVxyXG5cdFx0XHQudGhlbigoZGF0YSk9PntcclxuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xyXG5cdFx0XHRcdFx0dmFyIGFiID0gdG9BcnJheUJ1ZmZlcihkYXRhKTsgXHJcblx0XHRcdFx0XHRhdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoYWIsKGJ1ZmZlcik9PntcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZShidWZmZXIpO1xyXG5cdFx0XHRcdFx0fSwoZXJyKT0+e3JlamVjdChuZXcgRXJyb3IoJ2RlY29kZUF1ZGlvRGF0YSgpOmVycm9yOicpKTt9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnRoZW4oKChpZHgpPT4geyBcclxuXHRcdFx0XHRyZXR1cm4gKGJ1ZmZlcik9PntcclxuXHRcdFx0XHRcdHZhciBzb3VyY2UgPSBhdWRpb0N0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuXHRcdFx0XHRcdHNvdXJjZS5idWZmZXIgPSBidWZmZXI7XHJcblx0XHRcdFx0XHRzb3VyY2UubG9vcCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0c291cmNlcy5wdXNoKHNvdXJjZSk7XHJcblx0XHRcdFx0XHR2YXIgZ2FpbiA9IGF1ZGlvQ3R4LmNyZWF0ZUdhaW4oKTtcclxuXHRcdFx0XHRcdHNvdXJjZS5jb25uZWN0KGdhaW4pO1xyXG5cdFx0XHRcdFx0Z2Fpbi5jb25uZWN0KGF1ZGlvQ3R4LmRlc3RpbmF0aW9uKTtcclxuXHRcdFx0XHRcdHZhciBzbGlkZXIgPSBuZXcgU2xpZGVyKHN2Zyx7eDo1MCArIGlkeCAqIDcwLHk6NzY4IC0gMjQwfSk7XHJcblx0XHRcdFx0XHRnYWluLmdhaW4udmFsdWUgPSBzbGlkZXIudmFsdWUgPSAwLjU7XHJcblx0XHRcdFx0XHRzbGlkZXIub24oJ2NoYW5nZScsKHYpPT57XHJcblx0XHRcdFx0XHRcdGdhaW4uZ2Fpbi52YWx1ZSA9IHY7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9KShpKSlcclxuXHRcdFx0LmNhdGNoKChlKT0+e1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGUpO1xyXG5cdFx0XHR9KTtcdFx0XHRcdFxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRwcm9taXNlXHJcblx0XHQudGhlbigoKT0+e1xyXG5cdFx0XHRjb25zb2xlLmxvZygncGxheScpO1xyXG5cdFx0XHR2YXIgY3VycmVudCA9IGF1ZGlvQ3R4LmN1cnJlbnRUaW1lICsgMC4wMTtcclxuXHRcdFx0c291cmNlcy5mb3JFYWNoKChzKT0+e1xyXG5cdFx0XHRcdHMuc3RhcnQoY3VycmVudCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0XHRcclxuXHRcclxuXHQvLyB2YXIgc2xpZGVyID0gbmV3IFNsaWRlcihzdmcse3g6NTAseTo3NjggLSAyMjB9KTtcclxuXHQvLyB2YXIgc2xpZGVyMiA9IG5ldyBTbGlkZXIoc3ZnLHt4OjEyMCx5Ojc2OCAtIDIyMH0pO1xyXG5cdC8vIHNsaWRlci52YWx1ZSA9IDAuNTtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
